#!/usr/bin/perl

use strict;
use warnings;

my $version = '
Version: 0.1.2 (2020-03-19)
Author: Adam Yongxin Ye @ BCH
';
my $usage = "Usage: perl $0
	<scripts_dir> <HTGTS_VDJ_annotated.tsv> <output_prefix> <mm9|mm9AJ>
	[iter_num (default:9)] [allowed_possible_D_num (default:99)]
	[init_ref_D_usage.tsv (default:even_probabilities] 
Input:
	<HTGTS_VDJ_annotated.tsv>  generated by yyx_annotate_HTGTS_VDJ_pipeline.20200211.py
	[init_ref_D_usage.tsv]	two columns: D, usage(%)
Output:
	<output_prefix>.allow_*.iter_*.D_reannotated.tsv
	<output_prefix>.allow_*.iter_*.D_usage.tsv
".$version;

if(@ARGV < 3){
	die $usage;
}
my ($scripts_dir, $input_filename, $output_prefix, $mm9_mm9AJ) = @ARGV;

my $iter_num = 9;
if(@ARGV > 4){
	$iter_num = $ARGV[4];
}

my $allowed_possible_D_num = 99;
if(@ARGV > 5){
	$allowed_possible_D_num = $ARGV[5];
}

my @filenames;
if(@ARGV > 6 && $ARGV[6] ne "even_probabilities"){
	$filenames[3] = $ARGV[6];
}else{
	$filenames[3] = "";
}


stop_if_file_not_exists($scripts_dir."/yyx_reannotate_calculate_mid_D_usage.20200319.pl");


my $start_time = time();
print STDERR "[PERL-START] ".scalar(localtime())."\n";


my $command;
my $i;
for($i=1; $i<=$iter_num; $i++){
	print STDERR "Now running iteration $i ...\n";
	$filenames[($i-1)*10+5] = $output_prefix . ".allow_".$allowed_possible_D_num . ".iter_".$i;
	$filenames[($i-1)*10+7] = $filenames[($i-1)*10+5] . ".D_reannotated.tsv";
	$filenames[($i-1)*10+8] = $filenames[($i-1)*10+5] . ".D_usage.tsv";

	$command = "cat ".$input_filename." | perl ".$scripts_dir."/yyx_reannotate_calculate_mid_D_usage.20200319.pl  ".$filenames[($i-1)*10+5]."  $mm9_mm9AJ  $allowed_possible_D_num  ".$filenames[($i-1)*10+3];
	check_file_then_exec_command([@filenames[($i-1)*10+7 .. ($i-1)*10+8]], $command, 1,1,0);

	$filenames[$i*10+3] = $filenames[($i-1)*10+8];
}

print STDERR "Run through $iter_num iterations successfully. Congratulations!\n";
print STDERR "Final output files are:\n\t".$filenames[($iter_num-1)*10+7]."   <--  Annotation of each VDJ read\n    and\n\t".$filenames[($iter_num-1)*10+8]."         <--  Final D usage here !!\n";


check_elapsed_time($start_time);
print STDERR "[PERL-END] ".scalar(localtime())."\n";

0;




sub generateRandomString{
	my ($length) = @_;
	my $ans = "";
	my ($random, $random2);
	my ($i, $tmp);
	for($i=0; $i<$length; $i++){
		$random = rand();
		$random2 = $random * 2 - int($random * 2);
		if($random * 2 < 1){
			$tmp = int(ord('A') + $random2 * 26);
			if($tmp > ord('Z')){  $tmp = ord('Z'); }
			$tmp = chr($tmp);
			$ans .= $tmp;
		}else{
			$tmp = int(ord('a') + $random2 * 26);
			if($tmp > ord('z')){  $tmp = ord('z'); }
			$tmp = chr($tmp);
			$ans .= $tmp;
		}
	}
	return($ans);
}



sub check_final_file_then_remove_intermediate_file{
	my ($final_filename, $intermediate_filename) = @_;
	my $command;
	if(ref($intermediate_filename) eq ""){
		$intermediate_filename = [$intermediate_filename];
	}
	if(exist_file_or_dir($final_filename, "So remove intermediate files...")){
		$command = "rm ".join(" ", @{$intermediate_filename});
		print STDERR "[PERL-SYSTEM] ".$command."\n";
		system($command);
	}
}


sub check_file_then_exec_command{
	my ($filename, $command, $should_time, $error_stop, $not_run) = @_;
	my $start_time = time();

	print STDERR "[PERL-SYSTEM] ".$command."\n";
	if(exist_file_or_dir($filename, "Skip this above command...")){
		return;
	}

	if(!(defined($not_run) && $not_run!=0)){
		if(system("/bin/bash", "-c", $command)!=0){
			if(defined($error_stop) && $error_stop!=0){
				die "Error: when exec last system command, return value = $?\n";
			}
		}
	}

	if(defined($should_time) && $should_time){
		check_elapsed_time($start_time);
	}
}

sub check_elapsed_time{
	my ($start_time, $end_time, $elapsed_time);
	my ($hour, $min, $sec, $day);
	$start_time = shift(@_);
	$end_time = time();
	$elapsed_time = $end_time - $start_time;
	$day = int($elapsed_time / (3600*24));
	$hour = int($elapsed_time % (3600*24) / 3600);
	$min = int($elapsed_time % 3600 / 60);
	$sec = $elapsed_time % 60;
	$elapsed_time = "";
	if($day>0){ $elapsed_time .= $day."day "; }
	if($hour>0){ $elapsed_time .= $hour."h"; }
	if($min>0){ $elapsed_time .= $min."min"; }
	if($sec>0 || $elapsed_time eq ""){ $elapsed_time .= $sec."s"; }
	print STDERR "[PERL-SYSTEM-TIME] ".$elapsed_time."\n";
}

sub exist_file_or_dir{
	my ($filenames, $str) = @_;
	my $returnValue = 0;
	if(ref($filenames) eq ""){
		$filenames = [$filenames];
	}
	if(!defined($str)){
		$str = "";
	}

	foreach my $filename (@{$filenames}){
		if(defined($filename) && -e $filename){
			if(-d $filename){
				if(! check_is_empty_dir($filename)){
					print STDERR "[CHECK-EXIST] Dir ".$filename." has already existed, and not empty. ".$str."\n";
					$returnValue = 1;
					last;
				}
			}elsif(-s $filename >= 100){
				print STDERR "[CHECK-EXIST] File ".$filename." has already existed. ".$str."\n";
				$returnValue = 1;
				last;
			}
		}
	}

	return $returnValue;
}


sub check_is_empty_dir{
	my ($dirname) = @_;
	my $dirHandle;
	my @contents;
	if(-d $dirname){
		if(opendir($dirHandle, $dirname)){
			@contents = readdir($dirHandle);
			closedir($dirHandle);
			if(scalar(@contents)>2){		# empty dir has . and ..
				return 0;		# not empty dir
			}else{
				return 1;		# is empty dir
			}
		}else{
			print STDERR ("Warning: cannot open dir $dirname\n");
			return -1;		# Cannot open dir
		}
	}else{
		print STDERR ("Warning: Not a dir is attemped to be checked\n");
		return -2;		# Not a dir
	}
}


sub stop_if_file_not_exists{
	my ($filenames, $mode) = @_;
	if(!defined($mode)){
		$mode = "any";
	}
#	print STDERR "[DEBUG] mode = $mode\n";
	if($mode ne "any" && $mode ne "all"){
		die "Error: mode should be either 'any' or 'all', in stop_if_file_not_exist()\n";
	}
	my $is_mode_all = 0;
	if($mode eq "all"){
		$is_mode_all = 1;
	}

	if(ref($filenames) eq ""){
		$filenames = [$filenames];
	}
	my $checkFileNumber = 0;
	my $missingFileNumber = 0;
	my $filename;
	foreach $filename (@{$filenames}){
		if(defined($filename)){
			$checkFileNumber += 1;
			if(!(-e $filename && -s $filename >= 100)){
				print STDERR "[CHECK-EXIST] File " . $filename . " does not exist.\n";
				$missingFileNumber += 1;
			}else{
				print STDERR "[CHECK-EXIST] File " . $filename . " exists.  Good.\n";
			}
		}
	}
	if($missingFileNumber > 0){
		if(!$is_mode_all){
			die "[STOP-NOT-EXIST] Error: requested $missingFileNumber file(s) is missing. Terminate!\n";
		}elsif($missingFileNumber == $checkFileNumber){
			die "[STOP-NOT-EXIST] Error: all requested file(s) are missing. Terminate!\n";
		}
	}
}
